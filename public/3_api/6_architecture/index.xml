<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>System Architecture :: Djazz</title>
    <link>http://localhost:1313/Djazz_2.0_documentation/3_api/6_architecture.html</link>
    <description>Synchronous and Asynchoronous Input Input is passed to patchers two ways: synchronously and asynchronously, depending on the type of input data.</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/Djazz_2.0_documentation/3_api/6_architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>General Approach</title>
      <link>http://localhost:1313/Djazz_2.0_documentation/3_api/6_architecture/1_general_methods.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Djazz_2.0_documentation/3_api/6_architecture/1_general_methods.html</guid>
      <description>Synchronous data is passed using patch lines. Sends and receives are avoided in order to allow event probes, protect encapsulation, and generally keep patchers readable.</description>
    </item>
    <item>
      <title>Asynchronous Data and the MVCVC Design</title>
      <link>http://localhost:1313/Djazz_2.0_documentation/3_api/6_architecture/2_asynchronous_data_mvcvc.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Djazz_2.0_documentation/3_api/6_architecture/2_asynchronous_data_mvcvc.html</guid>
      <description>ARCHITECTURE Djazz uses the familiar Model-View-Control-View Control (MVCVC) design pattern. Each of these components will be discussed below.</description>
    </item>
    <item>
      <title>Synchronous Data in the Model</title>
      <link>http://localhost:1313/Djazz_2.0_documentation/3_api/6_architecture/3_synchronous_data_model.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Djazz_2.0_documentation/3_api/6_architecture/3_synchronous_data_model.html</guid>
      <description>Because Djazz is beat-based, most objects are built to receive and process information at recurring instances.</description>
    </item>
  </channel>
</rss>